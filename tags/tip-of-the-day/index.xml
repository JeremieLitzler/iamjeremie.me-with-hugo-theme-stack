<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tip of the Day on Jérémie Litzler</title><link>https://iamjeremie.me/tags/tip-of-the-day/</link><description>Recent content in Tip of the Day on Jérémie Litzler</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 15 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://iamjeremie.me/tags/tip-of-the-day/index.xml" rel="self" type="application/rss+xml"/><item><title>How to add cannonical URL to a Hugo blog?</title><link>https://iamjeremie.me/post/2024-03/how-to-add-cannonical-url-to-a-hugo-blog/</link><pubDate>Fri, 15 Mar 2024 00:00:00 +0000</pubDate><guid>https://iamjeremie.me/post/2024-03/how-to-add-cannonical-url-to-a-hugo-blog/</guid><description>&lt;img src="https://iamjeremie.me/post/2024-03/how-to-add-cannonical-url-to-a-hugo-blog/images/2024-03-15-a-smartphone-and-a-pen-on-a-desk.jpg" alt="Featured image of post How to add cannonical URL to a Hugo blog?" />&lt;p>I’m using the &lt;a href="https://github.com/CaiJimmy/hugo-theme-stack">Hugo theme stack&lt;/a> from &lt;a href="https://jimmycai.com/">Jimmy Cai&lt;/a>.&lt;/p>
&lt;p>It already includes in the head template the code to add a canonical link.&lt;/p>
&lt;p>But, at one stage, I had to set a link from an article I published on a publishing platform.&lt;/p>
&lt;p>Therefore, I couldn’t let the theme generate a canonical link automatically.&lt;/p>
&lt;h2 id="the-goal">The goal&lt;/h2>
&lt;p>I wanted to keep the automation for articles first published on my blog.&lt;/p>
&lt;p>Then, in some cases, I wanted to republish an article on my blog while it was already available on the Internet.&lt;/p>
&lt;h2 id="why">Why&lt;/h2>
&lt;p>In SEO, the best practices are:&lt;/p>
&lt;ul>
&lt;li>Each webpage must have a canonical link.&lt;/li>
&lt;li>A single webpage with the same content must be published once and only once in the Internet.&lt;/li>
&lt;/ul>
&lt;p>If you break those two rules, then the web crawlers won’t index your pages and you will miss out on some traffic.&lt;/p>
&lt;h2 id="solution-using-the-hugo-theme-stack">Solution using the Hugo theme stack&lt;/h2>
&lt;p>First I had to find where the canonical link was generated. I found it in &lt;code>layouts/partials/head/head.html&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span> &lt;span class="na">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;canonical&amp;#34;&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now, how could I specify within the frontmatter of a given article that I wanted the canonical link to be a specific one?&lt;/p>
&lt;p>With a little search, I’ve found &lt;a href="https://discourse.gohugo.io/t/how-to-add-cannonical-url-to-a-blog/34670/4">this thread on the Hugo forum&lt;/a>.&lt;/p>
&lt;p>The frontmatter data is accessible through &lt;code>.Params&lt;/code> that contains key/value pairs.&lt;/p>
&lt;p>The key is the name of the frontmatter property.&lt;/p>
&lt;p>In my case, I named the canonical &lt;code>relcanonical&lt;/code> and the value had to be a string.&lt;/p>
&lt;p>It gives you the following:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">relcanonical&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://iamjeremie.me&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The &lt;code>head.html&lt;/code> line above had to change to the following:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-htm" data-lang="htm">&lt;span class="line">&lt;span class="cl">{{ with .Params.relcanonical }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span> &lt;span class="na">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;canonical&amp;#34;&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;{{ . | relLangURL }}&amp;#34;&lt;/span> &lt;span class="na">itemprop&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;url&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{{ else -}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span> &lt;span class="na">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;canonical&amp;#34;&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span> &lt;span class="na">itemprop&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;url&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{{ end -}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In the above code,&lt;/p>
&lt;ul>
&lt;li>When the &lt;code>relcanonical&lt;/code> is set (&lt;code>{{ with .Params.relcanonical }}&lt;/code>)&lt;/li>
&lt;li>Use its value, which is the &lt;code>.&lt;/code> in &lt;code>{{ . }}&lt;/code>.&lt;/li>
&lt;/ul>
&lt;div class="jli-notice jli-notice-note" id="The moustache syntax is used for Go programming within the HTML template" >
&lt;p class="jli-notice-title">The moustache syntax is used for Go programming within the HTML template&lt;/p>&lt;/div>
&lt;p>I hope you found this useful.&lt;/p>
&lt;p>Credit : Photo by &lt;a href="https://unsplash.com/@steve_j?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash">Steve Johnson&lt;/a> on &lt;a href="https://unsplash.com/photos/black-smartphone-beside-pen-rNYCrcjUnOA?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash">Unsplash&lt;/a>.&lt;/p></description></item><item><title>Extract arrays from objects into a single array</title><link>https://iamjeremie.me/post/2024-03/extract-arrays-from-a-list-of-objects-into-a-single-array/</link><pubDate>Tue, 12 Mar 2024 00:00:00 +0000</pubDate><guid>https://iamjeremie.me/post/2024-03/extract-arrays-from-a-list-of-objects-into-a-single-array/</guid><description>&lt;img src="https://iamjeremie.me/post/2024-03/extract-arrays-from-a-list-of-objects-into-a-single-array/images/2024-03-13-shoes-sorted-into-trays.jpg" alt="Featured image of post Extract arrays from objects into a single array" />&lt;p>It’s simple: use the &lt;code>Array.prototype.flatMap()&lt;/code> method along with the object destructuring.&lt;/p>
&lt;p>For example, you have this array of objects. Each object contains an array of primitive values:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;categories&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;forums&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;-KpOx5Y4AqRr3sB4Ybwj&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;-KsjO4_W3W9Q2Z2UmuPr&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Feedback &amp;amp; Information&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;slug&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;feedback-and-information&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;-KpR7vRkiRPpbUd_TVAR&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;forums&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;-KsjPat5MWCx-dkjNVg8&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;-KsjPjasLh0TFtZmffEo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;-Kvd1Vg_ankLYgrxC50F&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;-KvdCowY9mDvM0EH8Pvs&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;-KvhkEl6F673igPtnbso&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Discussions&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;slug&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;discussions&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;-KsjPKA6hDuHlQK_lJWO&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;forums&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;-Kvclvu_Qd9QdS9ciqUl&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;-KvcmOcppNYK8NCesmB9&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Comedy&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;slug&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;comedy&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;-KvclpNRjpI5W-j0JQGU&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>&lt;span class="err">,&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If you want to get the forum strings, using object destructuring and &lt;code>flatMap&lt;/code> will provide you the solution:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tsx" data-lang="tsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">forums&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">categories&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">flatMap&lt;/span>&lt;span class="p">(({&lt;/span> &lt;span class="nx">forums&lt;/span> &lt;span class="p">})&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nx">forums&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The result will give you:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;-KpOx5Y4AqRr3sB4Ybwj&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;-KsjO4_W3W9Q2Z2UmuPr&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;-KsjPat5MWCx-dkjNVg8&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;-KsjPjasLh0TFtZmffEo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;-Kvd1Vg_ankLYgrxC50F&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;-KvdCowY9mDvM0EH8Pvs&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;-KvhkEl6F673igPtnbso&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;-Kvclvu_Qd9QdS9ciqUl&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;-KvcmOcppNYK8NCesmB9&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a href="https://jsfiddle.net/puzzlout/98w7h4xL/">Check out the JSFiddle demo&lt;/a> to prove it.&lt;/p>
&lt;p>Enjoy!&lt;/p>
&lt;p>Credit : Photo by &lt;a href="https://unsplash.com/@alevisionco?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash">Alev Takil&lt;/a> on &lt;a href="https://unsplash.com/photos/assorted-color-sneakers-d-1FY75fh_s?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash">Unsplash&lt;/a>.&lt;/p></description></item><item><title>Building an HTML accordion without JavaScript</title><link>https://iamjeremie.me/post/2024-03/build-a-html-friendly-accordeon-without-javascript/</link><pubDate>Mon, 11 Mar 2024 00:00:00 +0000</pubDate><guid>https://iamjeremie.me/post/2024-03/build-a-html-friendly-accordeon-without-javascript/</guid><description>&lt;img src="https://iamjeremie.me/post/2024-03/build-a-html-friendly-accordeon-without-javascript/images/2024-02-11-a-vintage-accordeon.jpg" alt="Featured image of post Building an HTML accordion without JavaScript" />&lt;p>Do you know the &lt;code>details&lt;/code> and &lt;code>summary&lt;/code> HTML element?&lt;/p>
&lt;p>You should.&lt;/p>
&lt;p>To create an accordion with no JavaScript, they are your friends.&lt;/p>
&lt;p>But you may want to customize the look.&lt;/p>
&lt;p>Using the &lt;code>::after&lt;/code> pseudo-class on the &lt;code>summary&lt;/code> element, you can add some content with the &lt;code>content&lt;/code> property.&lt;/p>
&lt;p>What about changing the content based on the state of the &lt;code>details&lt;/code> element (e.g. opened or closed)?&lt;/p>
&lt;p>Apply a different style when the accordion is open using the &lt;code>details[open]&lt;/code> selector.&lt;/p>
&lt;p>Here is the live demo I use on my blog &lt;a href="https://jsfiddle.net/puzzlout/j09efgpn/">on JSFiddle&lt;/a>.&lt;/p>
&lt;p>Enjoy!&lt;/p>
&lt;p>Credit : Photo by &lt;a href="https://unsplash.com/@gaellemarcel?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash">Gaelle Marcel&lt;/a> on &lt;a href="https://unsplash.com/photos/brown-chest-near-wall-MwMmOtj6z2c?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash">Unsplash&lt;/a>.&lt;/p></description></item><item><title>Defining your props in Vue 3 using TypeScript</title><link>https://iamjeremie.me/post/2024-03/defining-your-props-in-vue-3-using-typescript/</link><pubDate>Fri, 08 Mar 2024 00:00:00 +0000</pubDate><guid>https://iamjeremie.me/post/2024-03/defining-your-props-in-vue-3-using-typescript/</guid><description>&lt;img src="https://iamjeremie.me/post/2024-03/defining-your-props-in-vue-3-using-typescript/images/2024-03-08-example-prop.jpg" alt="Featured image of post Defining your props in Vue 3 using TypeScript" />&lt;p>Here is what I learned from having spent quite a bit of time when trying and using &lt;code>defineProps&lt;/code> with Vue 3 and TypeScript.&lt;/p>
&lt;p>As a remind, using the JavaScript, &lt;em>props&lt;/em> are defined the following way:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">props&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">defineProps&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>However, using TypeScript, when the &lt;em>prop&lt;/em> is required, it becomes:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tsx" data-lang="tsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">props&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">defineProps&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">string&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Notice the &lt;em>prop&lt;/em> type isn’t the same: &lt;code>String&lt;/code> in JavaScript vs. &lt;code>string&lt;/code> in TypeScript. It’s important to follow that usage so the code works. And if you don’t, ESLint will make sure to tell when writing in TypeScript.&lt;/p>
&lt;p>And when you need to set a &lt;em>prop&lt;/em> as non-required (implicitly, they’re required…), use the &lt;code>?&lt;/code> following the &lt;em>prop&lt;/em> name:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tsx" data-lang="tsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">props&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">defineProps&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="nx">id?&lt;/span>: &lt;span class="kt">string&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now, it will get more complex when you need to set defaults.&lt;/p>
&lt;p>Before, using JavaScript and the Option API, you would write:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">props&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">null&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Or if you prefer the Composition API, it would look this:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">id&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">defineProps&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Note: you can destructure the &lt;em>props&lt;/em> easily with &lt;code>{ propName }&lt;/code> as shown above.&lt;/p>
&lt;p>Using TypeScript and the composition API, you will need to use &lt;code>withDefaults&lt;/code> macro &lt;strong>and&lt;/strong> create an interface to define the &lt;em>props&lt;/em>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">ThreadEditorPageProps&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">title?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">body?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">props&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">withDefaults&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">defineProps&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ThreadEditorPageProps&lt;/span>&lt;span class="p">&amp;gt;(),&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">body&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>So let’s break down the code:&lt;/p>
&lt;ol>
&lt;li>&lt;code>title&lt;/code> and &lt;code>body&lt;/code> are string &lt;em>props&lt;/em> and they’re optional.&lt;/li>
&lt;li>then (1) instantiate the &lt;em>props&lt;/em> by providing to the &lt;code>withDefaults&lt;/code> macro the &lt;code>defineProps&lt;/code> macro typed with the interface and (2) add an object with all the &lt;em>props&lt;/em> you need to define a default value for.&lt;/li>
&lt;/ol>
&lt;p>In the example, not providing a default value would mean the &lt;em>props&lt;/em> would both equal to &lt;code>undefined&lt;/code> because of the &lt;code>?&lt;/code>.&lt;/p>
&lt;p>With explicit defaults, they will equal to an empty string.&lt;/p>
&lt;p>You don’t have to define a default for all &lt;em>props&lt;/em> and they don’t need to be flagged as optional to receive a default value.&lt;/p>
&lt;p>Finally, when I recommend to use the interface declaration when you have many &lt;em>props&lt;/em> and extract this interface to a separate file that you will simply import in your component. To me, that makes the component’s code cleaner.&lt;/p>
&lt;p>Do you have questions on the topic? Read &lt;a href="https://vuejs.org/api/sfc-script-setup.html#defineprops-defineemits">the official documentation&lt;/a> or &lt;a href="https://iamjeremie.me/page/contact-me/">ask away!&lt;/a>&lt;/p></description></item><item><title>Differences between variable types in JavaScript</title><link>https://iamjeremie.me/post/2024-03/variable-types-in-javascript/</link><pubDate>Wed, 06 Mar 2024 00:00:00 +0000</pubDate><guid>https://iamjeremie.me/post/2024-03/variable-types-in-javascript/</guid><description>&lt;img src="https://iamjeremie.me/post/2024-03/variable-types-in-javascript/images/2024-03-06-list-of-variable-types.png" alt="Featured image of post Differences between variable types in JavaScript" />&lt;p>I will take the example of JavaScript in this article, but the same is true in many programming languages, like C#.&lt;/p>
&lt;p>Basically, there are two families of variables types: primitives and objects.&lt;/p>
&lt;p>Within each, you find the well-known types as list in this top image.&lt;/p>
&lt;p>What is important to understand is that you can copy primitives &lt;strong>by value&lt;/strong> or you copy object types &lt;strong>by reference&lt;/strong>.&lt;/p>
&lt;h2 id="value-types">Value types&lt;/h2>
&lt;p>For example:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">greeting&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">newGreeting&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">gretting&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//this assignent doesn&amp;#39;t change the value of the variable `gretting`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">newGreeting&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Bonjour&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Value types store the actual value in memory. And the above code shows that a distinct copy of the value &lt;code>gretting&lt;/code> is created to initialize &lt;code>newGreeting&lt;/code>.&lt;/p>
&lt;p>&lt;strong>You don&amp;rsquo;t have a link in any way between the two variables.&lt;/strong>&lt;/p>
&lt;h2 id="reference-types">Reference types&lt;/h2>
&lt;p>When you create an object, it’s stored in memory and the JavaScript uses a reference or &lt;em>its address in memory&lt;/em> to find the value.&lt;/p>
&lt;p>That reference is used to handling the object.&lt;/p>
&lt;p>For example:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">greeting&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Hello&amp;#34;&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">newGreeting&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">gretting&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">newGreeting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Bonjour&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The last assignment changes the value of the property &lt;code>gretting.message&lt;/code> because both &lt;strong>variable share the same refence in memory&lt;/strong>!&lt;/p>
&lt;p>To avoid that, you must create a true copy of &lt;code>greeting&lt;/code>. That can easily be done with the spread operator (given a flat object only, nested objects require more code&amp;hellip;):&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">greeting&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Hello&amp;#34;&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">newGreeting&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">...&lt;/span>&lt;span class="nx">greeting&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">newGreeting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Bonjour&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>With &lt;code>{...greeting}&lt;/code>, we assign a new object and therefore the JavaScript engine creates a new reference to store &lt;code>newGreeting&lt;/code>.&lt;/p>
&lt;p>Consequently, &lt;code>newGreeting.message = 'Bonjour';&lt;/code> won’t affect the value of &lt;code>greeting.message&lt;/code>.&lt;/p></description></item><item><title>How to use a Pinia store within a navigation guard</title><link>https://iamjeremie.me/post/2024-03/how-to-use-a-pinia-store-within-a-navigation-guard/</link><pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate><guid>https://iamjeremie.me/post/2024-03/how-to-use-a-pinia-store-within-a-navigation-guard/</guid><description>&lt;img src="https://iamjeremie.me/post/2024-03/how-to-use-a-pinia-store-within-a-navigation-guard/images/2024-03-01-pinia-image-from.jpg" alt="Featured image of post How to use a Pinia store within a navigation guard" />&lt;p>If you are building a medium-sized application, you will end up using navigation guards to browse the different pages of your application.&lt;/p>
&lt;p>The basic use case is when you want to check an element exists before loading its details (for example on &lt;code>beforeEnter&lt;/code>).&lt;/p>
&lt;p>Now, if you are building the application with Vue 3 and Pinia, you will do this by querying a store.&lt;/p>
&lt;p>However, the application doesn’t load Pinia until the &lt;code>mount&lt;/code> call and you load the router before that…&lt;/p>
&lt;p>Therefore, Pinia will throw an error &lt;em>“getActivePinia()” was called but there was no active Pinia. Are you trying to use a store before calling “app.use(pinia)”? See &lt;a href="https://pinia.vuejs.org/core-concepts/outside-component-usage.html">https://pinia.vuejs.org/core-concepts/outside-component-usage.html&lt;/a> for help. This will fail in production.&lt;/em>&lt;/p>
&lt;p>What is the solution? I followed the steps of &lt;a href="https://stackoverflow.com/a/70714477">this Stackoverflow answer&lt;/a>.&lt;/p>
&lt;ol>
&lt;li>Create a &lt;code>pinia.ts&lt;/code> file to create the Pinia instance. Place it in the same location that you put your stores.&lt;/li>
&lt;li>Import it and call &lt;code>use&lt;/code> on the application instance in &lt;code>main.ts&lt;/code>&lt;/li>
&lt;li>Import it in &lt;code>src/router/index.ts&lt;/code> and provide it to your store instance: &lt;code>const store = useStore( pinia )&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>The signature of the store &lt;code>useStory&lt;/code> doesn’t need to change. Providing the &lt;code>pinia&lt;/code> instance to the &lt;code>useStore()&lt;/code> is sufficient to make it work.&lt;/p></description></item><item><title>Creating a store with Vue 3, Pinia and TypeScript</title><link>https://iamjeremie.me/post/2024-03/creating-a-store-with-vue-3-pinia-and-typescript/</link><pubDate>Fri, 01 Mar 2024 00:00:00 +0000</pubDate><guid>https://iamjeremie.me/post/2024-03/creating-a-store-with-vue-3-pinia-and-typescript/</guid><description>&lt;img src="https://iamjeremie.me/post/2024-03/creating-a-store-with-vue-3-pinia-and-typescript/images/2024-03-01-pinia-image-from.jpg" alt="Featured image of post Creating a store with Vue 3, Pinia and TypeScript" />&lt;p>Pinia is the recommended state management plugin in Vue applications.&lt;/p>
&lt;p>Though you can use it with the “&lt;em>Option API&lt;/em>” way, if you are using TypeScript, go for the “&lt;em>Composition API&lt;/em>” way. Yes, even within the stores, you can use the setup pattern.&lt;/p>
&lt;p>With JavaScript, you would have, for example:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">ref&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;vue&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">defineStore&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;pinia&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="nx">useSampleData&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;@/composables/useSampleData&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">categoriesData&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useSampleData&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">useCategoryStore&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">defineStore&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;CategoryStore&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">state&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">categories&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">categoriesData&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">getters&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">getCategoryById&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">categoryId&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">match&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">categories&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nx">category&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Category&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">category&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">categoryId&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">match&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="kc">undefined&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">match&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>With TypeScript, it becomes:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tsx" data-lang="tsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">ref&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;vue&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">defineStore&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;pinia&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="nx">useSampleData&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;@/composables/useSampleData&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="kr">type&lt;/span> &lt;span class="nx">Category&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;@/types/Category&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">categoriesData&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useSampleData&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">useCategoryStore&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">defineStore&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;CategoryStore&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//STATE
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">categories&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">categoriesData&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//GETTERS
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">getCategoryById&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">categoryId&lt;/span>: &lt;span class="kt">string&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">undefined&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Category&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">match&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">categories&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nx">category&lt;/span>: &lt;span class="kt">Category&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nx">category&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">categoryId&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">match&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="kc">undefined&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">match&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">categories&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">getCategoryById&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The arrow function you see after the name of the store uses the function definition with the setup pattern.&lt;/p>
&lt;p>Special thanks to :&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vuejs/pinia/discussions/983#discussioncomment-2045733">This thread on GitHub&lt;/a> for guiding me to understand the technique.&lt;/li>
&lt;li>&lt;a href="https://vueschool.io/">VueSchool.io&lt;/a> for the &lt;a href="https://github.com/vueschool/pinia-the-enjoyable-vue-store">hero image&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Use the proper type when typing a prop in Vue.js</title><link>https://iamjeremie.me/post/2024-02/use-the-proper-type-when-typing-a-prop-in-vuejs/</link><pubDate>Wed, 28 Feb 2024 00:00:00 +0000</pubDate><guid>https://iamjeremie.me/post/2024-02/use-the-proper-type-when-typing-a-prop-in-vuejs/</guid><description>&lt;img src="https://iamjeremie.me/post/2024-02/use-the-proper-type-when-typing-a-prop-in-vuejs/images/2024-02-28-eslint-typescript-error-details.jpg" alt="Featured image of post Use the proper type when typing a prop in Vue.js" />&lt;p>Once again, I didn’t take me long to understand what I was missing, as ESLint errors are explicit.&lt;/p>
&lt;p>I encountered this when I was coding &lt;a href="https://vueschool.io/lessons/introducing-categories-collections-of-forums">the lesson 35&lt;/a> of the masterclass about Vue.js provided by the awesome team of VueSchool.io.&lt;/p>
&lt;p>When you type a prop, don’t use &lt;code>String&lt;/code> but use &lt;code>string&lt;/code> primitive type.&lt;/p>
&lt;p>The first is a wrapper object, but to make ESLint happy, you must use the primitive.&lt;/p>
&lt;p>For example, you should avoid this declaration:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">props&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">defineProps&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="nx">id?&lt;/span>: &lt;span class="kt">String&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">edit?&lt;/span>: &lt;span class="kt">boolean&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//eslint will complain on `props.id`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">getUserById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The same goes for:&lt;/p>
&lt;ul>
&lt;li>&lt;code>number&lt;/code> and &lt;code>Number&lt;/code>.&lt;/li>
&lt;li>&lt;code>boolean&lt;/code> and &lt;code>Boolean&lt;/code>.&lt;/li>
&lt;/ul></description></item><item><title>Simplify your ifs in JavaScript and TypeScript</title><link>https://iamjeremie.me/post/2024-02/simplify-your-ifs-in-javascript-and-typescript/</link><pubDate>Fri, 23 Feb 2024 00:00:00 +0000</pubDate><guid>https://iamjeremie.me/post/2024-02/simplify-your-ifs-in-javascript-and-typescript/</guid><description>&lt;img src="https://iamjeremie.me/post/2024-02/simplify-your-ifs-in-javascript-and-typescript/images/2024-02-23-code-sample.jpg" alt="Featured image of post Simplify your ifs in JavaScript and TypeScript" />&lt;p>Let’s suppose you have the following:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">value1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">result&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="kc">undefined&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">value2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>How can you reduce it to one line without writing &lt;code>if&lt;/code> ?&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">value1&lt;/span> &lt;span class="o">??&lt;/span> &lt;span class="nx">value2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>OK, you gain 3 lines, but before you use it everywhere, think about 2 things for your use cases:&lt;/p>
&lt;ol>
&lt;li>Is it changing something to the performance of your application?&lt;/li>
&lt;li>Is it going to be as readable as the 3 lines to anyone, senior and junior?&lt;/li>
&lt;/ol>
&lt;p>Maybe, in the example, it’s OK to use the Nullish coalescing operator.&lt;/p>
&lt;p>I would say it isn’t always the case.&lt;/p>
&lt;p>Please read the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing">MDN article on the &lt;em>Nullish coalescing operator&lt;/em>&lt;/a> on the topic.&lt;/p>
&lt;p>Also check out this &lt;a href="https://www.javascripttutorial.net/es-next/javascript-nullish-coalescing-operator/">&lt;em>javascripttutorial.net&lt;/em> article&lt;/a> which I liked because it goes in detail with nice use cases.&lt;/p>
&lt;p>Thanks for reading.&lt;/p></description></item><item><title>Using path aliases in a Vue.js project</title><link>https://iamjeremie.me/post/2024-02/using-an-alias-in-a-vuejs-project/</link><pubDate>Mon, 19 Feb 2024 00:00:00 +0000</pubDate><guid>https://iamjeremie.me/post/2024-02/using-an-alias-in-a-vuejs-project/</guid><description>&lt;img src="https://iamjeremie.me/post/2024-02/using-an-alias-in-a-vuejs-project/images/2024-02-19-vite.config.ts-contents.jpg" alt="Featured image of post Using path aliases in a Vue.js project" />&lt;p>I find this trick very handy once you have set it up.&lt;/p>
&lt;h2 id="in-javascript-projects">In JavaScript projects&lt;/h2>
&lt;p>Add the alias to jsconfig.json to have intellisense super powers and the advatange of absolute paths:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;compilerOptions&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;paths&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;@/*&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;./src/*&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="in-typescript-projects">In TypeScript projects&lt;/h2>
&lt;ol>
&lt;li>Install the package: &lt;code>@types/node&lt;/code> as dev dependency.&lt;/li>
&lt;li>Import the &lt;code>fileURLToPath&lt;/code> and &lt;code>URL&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">fileURLToPath&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">URL&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;node:url&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>Add the &lt;code>resolve&lt;/code> option in &lt;code>vite.config.ts&lt;/code> :&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">resolve&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">alias&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;@&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">fileURLToPath&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nx">URL&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;./src&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">import&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">meta&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">url&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>Add the alias to &lt;code>tsconfig.json&lt;/code> to avoid ESLint complaints and have intellisense super powers:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;#34;compilerOptions&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;paths&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;@/*&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;./src/*&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Making a unused method argument compliant with TypeScript and ESLint</title><link>https://iamjeremie.me/post/2024-02/make-a-unused-method-arg-compliant-with-ts-eslint/</link><pubDate>Fri, 16 Feb 2024 00:00:00 +0000</pubDate><guid>https://iamjeremie.me/post/2024-02/make-a-unused-method-arg-compliant-with-ts-eslint/</guid><description>&lt;img src="https://iamjeremie.me/post/2024-02/make-a-unused-method-arg-compliant-with-ts-eslint/images/2024-02-16-typescript-code-sample.png" alt="Featured image of post Making a unused method argument compliant with TypeScript and ESLint" />&lt;p>I am pretty new to TypeScript, as I am going through the &lt;a href="https://vueschool.io/courses">VueSchool curiculum&lt;/a>.&lt;/p>
&lt;p>I like what TypeScript brings to the code and how it makes you think more how to write your code.&lt;/p>
&lt;p>As I progressed, I wondered about something: how would you solve the TypeScript linting error when an argument in a method is not used but is mandatory ?&lt;/p>
&lt;p>Fun fact, I quickly came across this usecase.&lt;/p>
&lt;p>
&lt;img src="https://iamjeremie.me/post/2024-02/make-a-unused-method-arg-compliant-with-ts-eslint/images/code-example.png"
width="656"
height="695"
srcset="https://iamjeremie.me/post/2024-02/make-a-unused-method-arg-compliant-with-ts-eslint/images/code-example_hub8ca63ca0be980cfd6778dc0561f73ac_56822_360x0_resize_box_3.png 360w, https://iamjeremie.me/post/2024-02/make-a-unused-method-arg-compliant-with-ts-eslint/images/code-example_hub8ca63ca0be980cfd6778dc0561f73ac_56822_600x0_resize_box_3.png 600w, https://iamjeremie.me/post/2024-02/make-a-unused-method-arg-compliant-with-ts-eslint/images/code-example_hub8ca63ca0be980cfd6778dc0561f73ac_56822_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Code example failing to comply with ESLint and TypeScript"
class="gallery-image"
data-flex-grow="94"
data-flex-basis="226px"
>
&lt;/p>
&lt;p>In this case, I had no choice. The navigation guard &lt;code>beforeEnter&lt;/code> requires the second argument to be &lt;code>from&lt;/code>, even if I don&amp;rsquo;t use it&amp;hellip;&lt;/p>
&lt;p>How did I fix it? Simple: listen to what ESLint has to say. Sometimes, it provides a quick fix.&lt;/p>
&lt;p>In my case, it suggested me to mark the unused argument with a underscore and tada, ESLint became happy.&lt;/p></description></item><item><title>How to handle a 404 in a Single Page Application deployed to Netlify?</title><link>https://iamjeremie.me/post/2024-02/handle-a-404-in-a-spa-on-netlify/</link><pubDate>Wed, 14 Feb 2024 00:00:00 +0000</pubDate><guid>https://iamjeremie.me/post/2024-02/handle-a-404-in-a-spa-on-netlify/</guid><description>&lt;img src="https://iamjeremie.me/post/2024-02/handle-a-404-in-a-spa-on-netlify/images/2024-02-14-404-page-displayed-on-laptop.jpg" alt="Featured image of post How to handle a 404 in a Single Page Application deployed to Netlify?" />&lt;p>Out of the box, Single Page Application (SPA) handle what we call &lt;em>soft 404&lt;/em>. When you deploy to Netlify, we will see a page like this one:&lt;/p>
&lt;p>
&lt;img src="https://iamjeremie.me/post/2024-02/handle-a-404-in-a-spa-on-netlify/images/netlify-404-page.png"
width="604"
height="405"
srcset="https://iamjeremie.me/post/2024-02/handle-a-404-in-a-spa-on-netlify/images/netlify-404-page_hu6b4b90d0cb86c1bc52d18263bb8ac2f0_79648_360x0_resize_box_3.png 360w, https://iamjeremie.me/post/2024-02/handle-a-404-in-a-spa-on-netlify/images/netlify-404-page_hu6b4b90d0cb86c1bc52d18263bb8ac2f0_79648_600x0_resize_box_3.png 600w, https://iamjeremie.me/post/2024-02/handle-a-404-in-a-spa-on-netlify/images/netlify-404-page_hu6b4b90d0cb86c1bc52d18263bb8ac2f0_79648_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Netlify 404 Not Found page"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="357px"
>
&lt;/p>
&lt;p>To avoid that, it is as simple as adding a &lt;code>_redirects&lt;/code> file in the &lt;code>public&lt;/code> directory of the application and adding the following:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-txt" data-lang="txt">&lt;span class="line">&lt;span class="cl">/* /index.html 200
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This lets the SPA handle the 404 as a soft 404.&lt;/p>
&lt;p>See &lt;a href="https://answers.netlify.com/t/support-guide-i-ve-deployed-my-site-but-i-still-see-page-not-found/125">this forum thread&lt;/a> for more usecases.&lt;/p>
&lt;p>Credit: banner image by &lt;a href="https://unsplash.com/@introspectivedsgn?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash">Erik Mclean&lt;/a> on &lt;a href="https://unsplash.com/photos/black-asus-laptop-computer-showing-3-00-sxiSod0tyYQ?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash">Unsplash&lt;/a>&lt;/p></description></item></channel></rss>